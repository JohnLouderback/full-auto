// This file is auto-generated. Do not modify manually.

import { Directory } from "./schema";

export const virtualFileSystem: Directory = {
  "tsconfig.json": "{\r\n  \"compilerOptions\": {\r\n    \"module\": \"ESNext\",\r\n    \"target\": \"ESNext\",\r\n    \"lib\": [\r\n      \"es6\",\r\n      \"WebWorker\"\r\n    ],\r\n    \"inlineSourceMap\": true,\r\n    \"inlineSources\": true,\r\n    \"typeRoots\": [\r\n      \"../Schema/\"\r\n    ],\r\n    \"paths\": {\r\n      \"@library/*\": [\r\n        \"./Libs/*\"\r\n      ]\r\n    }\r\n  },\r\n  \"include\": [\r\n    \"./Schema/**/*.d.ts\",\r\n    \"./**/*.ts\"\r\n  ],\r\n  \"exclude\": [\r\n    \"node_modules\"\r\n  ]\r\n}\r\n",
  "Libs": {
    "Application.ts": "import { Process } from \"./Process\";\r\nimport { Window } from \"./Window\";\r\n\n/**\n * Abstractly represents an executable application that is or was running on the\n * system.\n *\n */\r\n// Auto-generated from C# class Application\r\nexport interface Application {\r\n    /**\n     * An awaitable signal that will resolve when the application's process\n     * exits.\n     *\n     */\r\n    readonly exitSignal: Promise<void>;\r\n    /**\n     * Represents the process that is running the application.\n     *\n     */\r\n    readonly process: Process;\r\n    /**\n     * Lists the windows of the application. It does not list the windows of\n     * child processes or child\n     * windows.\n     *\n     * @returns A list of windows.\n     */\r\n    listWindows(): Array<Window>;\r\n    /**\n     * Lists the windows of the application. It lists all windows belonging to\n     * the application,\n     * including child windows. If {@link includeChildProcesses} is `true`,\n     * then it will also list windows of child processes.\n     *\n     * @param [includeChildProcesses=false] Whether to additionally include\n     * windows of child processes.\n     * @returns A list of windows.\n     */\r\n    listWindowsDeep(includeChildProcesses?: boolean): Array<Window>;\r\n}\r\n",
    "BoundingBox.ts": "/**\n * Represents a bounding box in 2D space. The bounding box is its X and Y\n * position, as well as its\n * width and height. The X and Y position represent the top-left corner of the\n * bounding box relative\n * to the origin of the space. The origin is context-specific.\n *\n */\r\n// Auto-generated from C# class BoundingBox\r\nexport interface BoundingBox {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n    toString(): string;\r\n}\r\n",
    "Process.ts": "/**\n * Represents a process that is or was running on the system.\n *\n */\r\n// Auto-generated from C# class Process\r\nexport interface Process {\r\n    /**\n     * The names of the process. For example: `\"chrome\"`.\n     *\n     */\r\n    readonly name: string;\r\n    /**\n     * The full path to the process. For example:\n     * `\"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\"`.\n     *\n     */\r\n    readonly fullPath: string;\r\n    /**\n     * The process ID, which is unique for each process. For example: `1234`.\n     *\n     */\r\n    readonly pid: number;\r\n    /**\n     * Forcefully terminates the process.\n     *\n     */\r\n    kill(): void;\r\n    /**\n     * Lists the current child processes of the process.\n     *\n     * @returns A list of child processes.\n     */\r\n    listChildren(): Array<Process>;\r\n}\r\n",
    "Tasks.ts": "// This file is auto-generated. Do not modify manually.\r\n\r\nimport { Application } from \"./Application\";\r\nimport { Window } from \"./Window\";\r\nimport { WindowSearchCriteria } from \"./WindowSearchCriteria\";\r\n\r\n/**\n * Launch the application at the specified path.\n *\n * @param path The path to the application.\n * @returns An {@link Application} object representing the application if it was\n * launched\n * successfully; otherwise, `null`. The {@link Application.ExitSignal}\n * property can be used to await the application's exit.\n * @throws ArgumentException Thrown when {@link path} is `null` or empty.\n */\r\nexport function launch(path: string): Application | null {\r\n    // @ts-expect-error - This function is injected into the engine dynamically.\r\n    return __Tasks.Launch(path);\r\n}\r\n\r\n/**\n * Waits for a window to be spawned with the specified criteria. This only\n * awaits new windows and\n * will not return a window that already exists at the time of calling.\n *\n * @param searchCriteria The criteria to use to search for the window.\n * @param [timeout=0\n * ] The maximum time to wait for the window to be created. If `0`, the method\n * waits\n * indefinitely.\n * @returns The window that was created, or `null` if the timeout elapsed.\n */\r\nexport function awaitWindow(searchCriteria: WindowSearchCriteria, timeout?: number): Promise<Window | null>;\r\n/**\n * Waits for a window to be spawned with the specified criteria. This only\n * awaits new windows and\n * will not return a window that already exists at the time of calling.\n *\n * @param searchCriteria A function that takes a {@link Window} and returns\n * `true` if the\n * window matches the criteria.\n * @param [timeout=0\n * ] The maximum time to wait for the window to be created. If `0`, the method\n * waits\n * indefinitely.\n * @returns The window that was created, or `null` if the timeout elapsed.\n */\r\nexport function awaitWindow(searchCriteria: WindowCriteriaCallback, timeout?: number): Promise<Window | null>;\r\nexport async function awaitWindow(...args: [searchCriteria: WindowSearchCriteria | WindowCriteriaCallback, timeout?: number | undefined]): Promise<Window | null> {\r\n    // @ts-expect-error - This function is injected into the engine dynamically.\r\n    return __Tasks.AwaitWindow(...args);\r\n}\r\n\r\n\r\n// Auto-generated from C# delegate WindowCriteriaCallback\r\nexport type WindowCriteriaCallback = (hwnd: Window) => boolean;\r\n\r\n",
    "Utils.ts": "// This file is auto-generated. Do not modify manually.\r\n/**\n * A collection of utility functions.\n *\n */\r\n\r\n\r\n/**\n * Returns a promise that resolves after the specified number of milliseconds.\n *\n * @param milliseconds The number of milliseconds to wait.\n * @returns A promise that resolves after the specified number of milliseconds.\n */\r\nexport function wait(milliseconds: number): Promise<void> {\r\n    // @ts-expect-error - This function is injected into the engine dynamically.\r\n    return __Utils.Wait(milliseconds);\r\n}\r\n\r\n",
    "Window.ts": "import { BoundingBox } from \"./BoundingBox\";\r\n\n/**\n * Represents a window of an application or another window.\n *\n */\n/**\n * Represents a window of an application or another window.\n *\n */\r\n// Auto-generated from C# class Window\r\nexport interface Window {\r\n    /**\n     * The handle of the window. This is a unique identifier representing the\n     * window.\n     *\n     */\r\n    handle: number;\r\n    /**\n     * The text of the window's titlebar. For example: `\"Untitled - Notepad\"`.\n     * It may be used\n     * to either get or set the title of the window.\n     *\n     */\r\n    title: string;\r\n    /**\n     * The class name of the window. For example: `\"Notepad\"`. Class names are\n     * generally\n     * used to identify the type of window within the application. They are not\n     * necessarily unique.\n     *\n     */\r\n    className: string;\r\n    getBoundingBox(): BoundingBox;\r\n    /**\n     * Sets the position and size of the window.\n     *\n     * @param boundingBox The bounding box to set the window to.\n     * @returns The same window this method was called on, for chaining.\n     */\r\n    setBoundingBox(boundingBox: BoundingBox): Window;\r\n    /**\n     * Sets the position and size of the window.\n     *\n     * @param x The x-coordinate of the window.\n     * @param y The y-coordinate of the window.\n     * @param width The width of the window.\n     * @param height The height of the window.\n     * @returns The same window this method was called on, for chaining.\n     */\r\n    setBoundingBox(x: number, y: number, width: number, height: number): Window;\r\n    readonly isClosed: boolean;\r\n    isMinimized: boolean;\r\n    isMaximized: boolean;\r\n    isShowing: boolean;\r\n    isFocused: boolean;\r\n    /**\n     * Resolves the next time the window is shown.\n     *\n     */\r\n    shown: Promise<void>;\r\n    /**\n     * Resolves the next time the window is hidden.\n     *\n     */\r\n    hidden: Promise<void>;\r\n    /**\n     * Resolves the next time the window is minimized.\n     *\n     */\r\n    minimized: Promise<void>;\r\n    /**\n     * Resolves the next time the window is maximized.\n     *\n     */\r\n    maximized: Promise<void>;\r\n    /**\n     * Resolves the next time the window is restored. When the window is\n     * \"un-minimized.\"\n     *\n     */\r\n    restored: Promise<void>;\r\n    focused: Promise<void>;\r\n    /**\n     * Resolves the next time the window's bounds change.\n     *\n     */\r\n    boundsChanged: Promise<void>;\r\n    /**\n     * Resolves once when the window is closed.\n     *\n     */\r\n    readonly closed: Promise<void>;\r\n    /**\n     * Binds a callback to an event.\n     *\n     * @param eventName The name of the event to bind the callback to.\n     * @param callback The callback to execute when the event occurs.\n     * @throws ArgumentException Thrown when the event name is not the name of a\n     * known event.\n     */\r\n    on(eventName: string, callback: WindowEventCallback): void;\r\n}\r\n\r\n// Auto-generated from C# delegate WindowEventCallback\r\nexport type WindowEventCallback = (window: Window) => void;\r\n\r\n",
    "WindowSearchCriteria.ts": "/**\n * Represents the criteria used to search for a window. Generally, at least one\n * of the properties\n * should be set to search for a window. If none are set, the search will match\n * any window.\n *\n */\r\n// Auto-generated from C# class WindowSearchCriteria\r\nexport interface WindowSearchCriteria {\r\n    title?: string | null;\r\n    className?: string | null;\r\n}\r\n"
  }
};